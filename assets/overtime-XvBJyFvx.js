import{J as f,r as u,q as h,K as i}from"./index-iT9Orqca.js";const x=f("overtime",()=>{const n=u([]),d=u(null),o=u(!1),a=u(null),m=u(new Date().toISOString().substring(0,7)),p=h(()=>new Date(m.value).toLocaleString("default",{month:"long",year:"numeric"}));return{overtimes:n,overtime:d,loading:o,error:a,selectedMonth:m,selectedMonthDisplay:p,fetchOvertimes:async(t={})=>{var s,r;o.value=!0,a.value=null;try{const e=await i.get("/overtimes",{params:t});n.value=e==null?void 0:e.data}catch(e){a.value=((r=(s=e.response)==null?void 0:s.data)==null?void 0:r.message)||"Failed to fetch overtimes",console.error("Error fetching overtimes:",e)}finally{o.value=!1}},createOvertime:async(t={})=>{var s,r;o.value=!0,a.value=null;try{const e=await i.post("/user-overtimes",t);return n.value.push(e.data.overtime),e.data.overtime}catch(e){throw a.value=((r=(s=e.response)==null?void 0:s.data)==null?void 0:r.message)||"Failed to create overtime",console.error("Error creating overtime:",e),new Error(a.value)}finally{o.value=!1}},updateApprovalTime:async(t,s)=>{var r,e;o.value=!0,a.value=null;try{const l=await i.patch(`/user-overtimes/${t}/update-approval-time`,{approval_overtime_hours:s}),v=n.value.findIndex(c=>c.id===t);return v!==-1&&(n.value[v]=l.data),l.data.overtime}catch(l){throw a.value=((e=(r=l.response)==null?void 0:r.data)==null?void 0:e.message)||`Failed to update overtime (ID: ${t})`,console.error(`Error updating overtime with id ${t}:`,l),new Error(a.value)}finally{o.value=!1}},updateOvertime:async(t,s)=>{var r,e;o.value=!0,a.value=null;try{const l=await i.put(`/overtimes/${t}`,s),v=n.value.findIndex(c=>c.id===t);return v!==-1&&(n.value[v]=l.data.overtime),l.data.overtime}catch(l){throw a.value=((e=(r=l.response)==null?void 0:r.data)==null?void 0:e.message)||`Failed to update overtime (ID: ${t})`,console.error(`Error updating overtime with id ${t}:`,l),new Error(a.value)}finally{o.value=!1}},deleteOvertime:async t=>{var s,r;o.value=!0,a.value=null;try{await i.delete(`/overtimes/${t}`),n.value=n.value.filter(e=>e.id!==t)}catch(e){throw a.value=((r=(s=e.response)==null?void 0:s.data)==null?void 0:r.message)||`Failed to delete overtime (ID: ${t})`,console.error(`Error deleting overtime with id ${t}:`,e),new Error(a.value)}finally{o.value=!1}},fetchUserOvertimes:async(t={})=>{var s,r;o.value=!0,a.value=null;try{const e=await i.get("/user-overtimes",{params:t});n.value=e.data}catch(e){a.value=((r=(s=e.response)==null?void 0:s.data)==null?void 0:r.message)||"Failed to fetch overtimes",console.error("Error fetching overtimes:",e)}finally{o.value=!1}},fetchUserMonthlyOvertimes:async(t,s)=>{var r,e;o.value=!0,a.value=null;try{const l=await i.get(`/user-monthly-overtimes/${t}/${s}`);n.value=l.data}catch(l){a.value=((e=(r=l.response)==null?void 0:r.data)==null?void 0:e.message)||"Failed to fetch overtimes",console.error("Error fetching overtimes:",l)}finally{o.value=!1}},fetchUserOvertimesByApplicationId:async t=>{var s,r;o.value=!0,a.value=null;try{const e=await i.get(`/${t}/user-overtimes`);n.value=e.data}catch(e){a.value=((r=(s=e.response)==null?void 0:s.data)==null?void 0:r.message)||"Failed to fetch overtimes",console.error("Error fetching overtimes:",e)}finally{o.value=!1}}}});export{x as u};
