import{J as h,r as v,q as p,K as n}from"./index-DHz7ni4_.js";const I=h("overtime",()=>{const l=v([]),m=v(null),o=v(!1),a=v(null),u=v(new Date().toISOString().substring(0,7)),d=p(()=>new Date(u.value).toLocaleString("default",{month:"long",year:"numeric"}));return{overtimes:l,overtime:m,loading:o,error:a,selectedMonth:u,selectedMonthDisplay:d,fetchOvertimes:async(t={})=>{var s,r;o.value=!0,a.value=null;try{const e=await n.get("/overtimes",{params:t});l.value=e==null?void 0:e.data}catch(e){a.value=((r=(s=e.response)==null?void 0:s.data)==null?void 0:r.message)||"Failed to fetch overtimes",console.error("Error fetching overtimes:",e)}finally{o.value=!1}},createOvertime:async(t={})=>{var s,r;o.value=!0,a.value=null;try{const e=await n.post("/user-overtimes",t);return l.value.push(e.data.overtime),e.data.overtime}catch(e){throw a.value=((r=(s=e.response)==null?void 0:s.data)==null?void 0:r.message)||"Failed to create overtime",console.error("Error creating overtime:",e),new Error(a.value)}finally{o.value=!1}},updateOvertime:async(t,s)=>{var r,e;o.value=!0,a.value=null;try{const i=await n.put(`/overtimes/${t}`,s),c=l.value.findIndex(f=>f.id===t);return c!==-1&&(l.value[c]=i.data.overtime),i.data.overtime}catch(i){throw a.value=((e=(r=i.response)==null?void 0:r.data)==null?void 0:e.message)||`Failed to update overtime (ID: ${t})`,console.error(`Error updating overtime with id ${t}:`,i),new Error(a.value)}finally{o.value=!1}},deleteOvertime:async t=>{var s,r;o.value=!0,a.value=null;try{await n.delete(`/overtimes/${t}`),l.value=l.value.filter(e=>e.id!==t)}catch(e){throw a.value=((r=(s=e.response)==null?void 0:s.data)==null?void 0:r.message)||`Failed to delete overtime (ID: ${t})`,console.error(`Error deleting overtime with id ${t}:`,e),new Error(a.value)}finally{o.value=!1}},fetchUserOvertimes:async(t={})=>{var s,r;o.value=!0,a.value=null;try{const e=await n.get("/user-overtimes",{params:t});l.value=e.data}catch(e){a.value=((r=(s=e.response)==null?void 0:s.data)==null?void 0:r.message)||"Failed to fetch overtimes",console.error("Error fetching overtimes:",e)}finally{o.value=!1}},fetchUserOvertimesByApplicationId:async t=>{var s,r;o.value=!0,a.value=null;try{const e=await n.get(`/${t}/user-overtimes`);l.value=e.data}catch(e){a.value=((r=(s=e.response)==null?void 0:s.data)==null?void 0:r.message)||"Failed to fetch overtimes",console.error("Error fetching overtimes:",e)}finally{o.value=!1}}}});export{I as u};
